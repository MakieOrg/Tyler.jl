{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tylerjl","title":"Tyler.jl","text":"<p>A package for downloading map tiles on demand from different data source providers.</p> <p>Info</p> <ul> <li>This package is currently in the initial phase of development.</li> </ul> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>In the Julia REPL type:</p> <pre><code>using Pkg\nPkg.add([\"https://github.com/JuliaGeo/TileProviders.jl\", \"https://github.com/JuliaGeo/MapTiles.jl\", \"https://github.com/MakieOrg/Tyler.jl.git\"])\n</code></pre> <p>or</p> <pre><code>] add https://github.com/JuliaGeo/TileProviders.jl https://github.com/JuliaGeo/MapTiles.jl https://github.com/MakieOrg/Tyler.jl.git\n</code></pre> <p>The <code>]</code> character starts the Julia package manager. Hit backspace key to return to Julia prompt.</p> <p></p> <p></p>"},{"location":"#api","title":"API","text":"<p># <code>Tyler.Interpolator</code> \u2014 Type.</p> <pre><code>Interpolator &lt;: AbstractProvider\n\nInterpolator(f; colormap=:thermal, options=Dict(:minzoom=1, :maxzoom=19))\n</code></pre> <p>Provides tiles by interpolating them on the fly.</p> <ul> <li><code>f</code>: an Interpolations.jl interpolator or similar.</li> <li><code>colormap</code>: A <code>Symbol</code> or <code>Vector{RGBA{Float32}}</code>. Default is <code>:thermal</code>.</li> </ul> <p>source</p> <p># <code>Tyler.Map</code> \u2014 Type.</p> <pre><code>Map\n\nMap(extent, [extent_crs=wgs84]; kw...)\n</code></pre> <p>Tylers main object, it plots tiles onto a Makie.jl <code>Axis</code>, downloading and plotting more tiles as you zoom and pan.</p> <p>Arguments</p> <p>-<code>extent</code>: the initial extent of the map, as a <code>GeometryBasics.Rect</code>     or an <code>Extents.Extent</code> in the projection of <code>extent_crs</code>. -<code>extent_crs</code>: Any <code>GeoFormatTypes</code> compatible crs, the default is wsg84.</p> <p>Keywords</p> <p>-<code>resolution</code>: The figure resolution. -<code>figure</code>: an existing <code>Makie.Figure</code> object. -<code>crs</code>: The providers coordinate reference system. -<code>provider</code>: a TileProviders.jl <code>Provider</code>. -<code>max_parallel_downloads</code>: limits the attempted simultaneous downloads, with a default of <code>16</code>. -<code>cache_size_gb</code>: limits the cache for storing tiles, with a default of <code>5</code>. -<code>depth</code>: the number of layers to load when zooming. Lower numbers will be slightly faster     but have more artefacts. The default is <code>8</code>. -<code>halo</code>: The fraction of the width of tiles to add as a halo so that panning is smooth - the     tiles will already be loaded. The default is <code>0.2</code>, which means <code>0.1</code> on each side. -<code>scale</code>: a tile scaling factor. Low number decrease the downloads but reduce the resolution.     The default is <code>1.0</code>.</p> <p>source</p>"},{"location":"examples/generated/Contributors/Howto/","title":"Contribute to Documentation","text":""},{"location":"examples/generated/Contributors/Howto/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>Info</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropiate level.</p> <p>Info</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/basic_features/","title":"Basic features: scatter, polygon and text","text":""},{"location":"examples/generated/UserGuide/basic_features/#basic-features-example","title":"Basic features example","text":""},{"location":"examples/generated/UserGuide/basic_features/#add-points-polygons-and-text-to-a-map","title":"Add points, polygons and text to a map","text":"<p>load packages</p> <pre><code>using Tyler, GLMakie\nusing TileProviders\nusing MapTiles\nusing Extents\n\n# select a map provider\nprovider = TileProviders.Esri(:WorldImagery)\n# Plot a point on the map\n# point location to add to map\nlat = 34.2013;\nlon = -118.1714;\n# convert to point in web_mercator\npts = Point2f(MapTiles.project((lon,lat), MapTiles.wgs84, MapTiles.web_mercator))\n# set how much area to map in degrees\ndelta = 1;\n# define Extent for display in web_mercator\nextent = Extent(X = (lon - delta/2, lon + delta/2), Y = (lat-delta/2, lat+delta/2));\n\n# show map\nm = Tyler.Map(extent; provider, figure=Figure(; size=(1000, 600)))\n# wait for tiles to fully load\nwait(m)\n</code></pre> <p></p> <p>Plot point on map</p> <pre><code>objscatter = scatter!(m.axis, pts; color = :red,\n    marker = '\u2b50', markersize = 50)\n# hide ticks, grid and lables\nhidedecorations!(m.axis)\n# hide frames\nhidespines!(m.axis)\n# Plot a plygon on the map\np1 = (lon-delta/8, lat-delta/8)\np2 = (lon-delta/8, lat+delta/8)\np3 = (lon+delta/8, lat+delta/8)\np4 = (lon+delta/8, lat-delta/8)\n\npolyg = MapTiles.project.([p1, p2, p3, p4], Ref(MapTiles.wgs84), Ref(MapTiles.web_mercator))\npolyg = Point2f.(polyg)\npoly!(polyg; color = :transparent, strokecolor = :black, strokewidth = 5)\n\n# Add text\npts2 = Point2f(MapTiles.project((lon,lat-delta/6), MapTiles.wgs84, MapTiles.web_mercator))\ntext!(pts2, text = \"Basic Example\"; fontsize = 30,\n    color = :darkblue, align = (:center, :center)\n    )\n# show figure\nm\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/iceloss_ex/","title":"Ice loss animation","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#greenland-ice-loss-example-animated-interactive","title":"Greenland ice loss example: animated &amp; interactive","text":"<pre><code>using Tyler\nusing GLMakie\nusing Arrow\nusing DataFrames\nusing TileProviders\nusing Extents\nusing Colors\nusing Dates\nusing HTTP\nGLMakie.activate!()\n\nurl = \"https://github.com/JuliaGeo/JuliaGeoData/blob/365a09596bfca59e0977c20c2c2f566c0b29dbaa/assets/data/iceloss_subset.arrow?raw=true\";\n\n# load ice loss data [courtesy of Chad Greene @ JPL]\nresp = HTTP.get(url);\ndf = DataFrame(Arrow.Table(resp.body));\n\n# select map provider\nprovider = TileProviders.Esri(:WorldImagery);\n\n# Greenland extent\nextent = Extent(X = (-54., -48.), Y = (68.8, 72.5));\n\n# extract data\ncnt = [length(foo) for foo in df.X];\nX =  reduce(vcat,df.X);\nY =  reduce(vcat,df.Y);\nZ = [repeat([i],c) for (i, c) = enumerate(cnt)];\nZ = reduce(vcat,Z);\n\n# make color map\nnc = length(Makie.to_colormap(:thermal));\nn = nrow(df);\nalpha = zeros(nc);\nalpha[1:maximum([1,round(Int64,1*nc/n)])] = alpha[1:maximum([1,round(Int64,1*nc/n)])] .* (1.05^-1.5);\nalpha[maximum([1,round(Int64,1*nc/n)])] = 1;\ncmap = Colors.alphacolor.(Makie.to_colormap(:thermal), alpha);\ncmap = Observable(cmap);\n\n# show map\nm = Tyler.Map(extent; provider, figure=Figure(; size=(700,600)));\n\n# create initial scatter plot\nscatter!(m.axis, X, Y; color = Z, colormap = cmap, colorrange = [0, n], markersize = 10);\n\n# add color bar\na,b = extrema(df.Date);\na = year(a);\nb = year(b);\nColorbar(m.figure[1,2]; colormap = cmap, colorrange = [a,b],\n    height=Relative(0.5), width = 15);\n\n# hide ticks, grid and lables\nhidedecorations!(m.axis);\n\n# hide frames\nhidespines!(m.axis);\n\n# wait for tiles to fully load\nwait(m)\n\n# ------ uncomment to create interactive-animated figure -----\n# The Documenter does not allow creations of interactive plots\n</code></pre> <p>loop to create animation</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/iceloss_ex/#if-interactive","title":"if interactive","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#for-k-115","title":"for k = 1:15","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#reset-apha","title":"# reset apha","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#alpha-zerosnc","title":"alpha[:] = zeros(nc);","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#cmap-colorsalphacolorcmap-alpha","title":"cmap[] = Colors.alphacolor.(cmap[], alpha)","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#for-i-in-21n","title":"for i in 2:1:n","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#modify-alpha","title":"# modify alpha","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#alpha1maximum1roundint64incn-alpha1maximum1roundint64incn-105-15","title":"alpha[1:maximum([1,round(Int64,inc/n)])] = alpha[1:maximum([1,round(Int64,inc/n)])] .* (1.05^-1.5);","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#alphamaximum1roundint64incn-1","title":"alpha[maximum([1,round(Int64,i*nc/n)])] = 1;","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#cmap-colorsalphacolorcmap-alpha_1","title":"cmap[] = Colors.alphacolor.(cmap[], alpha);","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#sleep0001","title":"sleep(0.001);","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#end","title":"end","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#end_1","title":"end","text":""},{"location":"examples/generated/UserGuide/iceloss_ex/#end_2","title":"end","text":"<p>Info</p> <p>Ice loss from the Greenland Ice Sheet: 1972-2022.</p> <p>Contact person: Alex Gardner &amp; Chad Greene</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/interpolation/","title":"On The Fly Interpolation","text":""},{"location":"examples/generated/UserGuide/interpolation/#using-interpolation-on-the-fly","title":"Using Interpolation On The Fly","text":"<pre><code>using Tyler, GLMakie\nusing Interpolations: interpolate, Gridded, Linear\n\nf(lon,lat)=cosd(16*lon)+sind(16*lat)\n\nf_in_0_1_range(lon,lat)=0.5+0.25*f(lon,lat)\n\nnodes=(-180.0:180.0, -90.0:90.0)\narray=[f(lon,lat) for lon in nodes[1], lat in nodes[2]]\narray=(array.-minimum(array))./(maximum(array)-minimum(array))\nitp = interpolate(nodes, array, Gridded(Linear()))\ncols=Makie.to_colormap(:viridis)\ncol(i)=RGBAf(Makie.interpolated_getindex(cols,i))\nfun(x,y) = col(itp(x,y))\n\noptions = Dict(:min_zoom =&gt; 1,:max_zoom =&gt; 19)\np1 = Tyler.Interpolator(f_in_0_1_range; options)\np2 = Tyler.Interpolator(fun; options)\n\nb = Rect2f(-20.0, -20.0, 40.0, 40.0)\nm = Tyler.Map(b, provider=p1)\n</code></pre> <p>Info</p> <p>Sine Waves</p> <p>Tip</p> <p>Try <code>b = Rect2f(-180.0, -89.9, 360.0, 179.8)</code></p> <p>Tip</p> <p><code>interpolated_getindex</code> requires input <code>i</code> to be in the 0-1 range</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/providers/","title":"Map Tile providers","text":""},{"location":"examples/generated/UserGuide/providers/#tile-providers","title":"Tile Providers","text":"<pre><code>using Tyler, GLMakie\nusing TileProviders\nusing MapTiles\n</code></pre> <p>Several providers are available (unfortunally is hard to find the ones that work properly). See the following list:</p> <pre><code>providers = TileProviders.list_providers()\n</code></pre> <pre><code>Dict{Function, Vector{Symbol}} with 39 entries:\n  OpenAIP               =&gt; []\n  MapTiler              =&gt; [:Streets, :Basic, :Bright, :Pastel, :Positron, :Hyb\u2026\n  MtbMap                =&gt; []\n  TomTom                =&gt; [:Basic, :Hybrid, :Labels]\n  OpenSeaMap            =&gt; []\n  OPNVKarte             =&gt; []\n  WaymarkedTrails       =&gt; [:hiking, :cycling, :mtb, :slopes, :riding, :skating]\n  NASAGIBS              =&gt; [:ModisTerraTrueColorCR, :ModisTerraBands367CR, :Vii\u2026\n  OpenWeatherMap        =&gt; [:Clouds, :CloudsClassic, :Precipitation, :Precipita\u2026\n  Thunderforest         =&gt; [:OpenCycleMap, :Transport, :TransportDark, :SpinalM\u2026\n  HERE                  =&gt; [:normalDay, :normalDayCustom, :normalDayGrey, :norm\u2026\n  CartoDB               =&gt; [:Positron, :PositronNoLabels, :PositronOnlyLabels, \u2026\n  BasemapAT             =&gt; [:basemap, :grau, :overlay, :terrain, :surface, :hig\u2026\n  SwissFederalGeoportal =&gt; [:NationalMapColor, :NationalMapGrey, :SWISSIMAGE]\n  JusticeMap            =&gt; [:income, :americanIndian, :asian, :black, :hispanic\u2026\n  Stadia                =&gt; [:AlidadeSmooth, :AlidadeSmoothDark, :OSMBright, :Ou\u2026\n  Stamen                =&gt; [:Toner, :TonerBackground, :TonerHybrid, :TonerLines\u2026\n  MapBox                =&gt; []\n  OpenTopoMap           =&gt; []\n  \u22ee                     =&gt; \u22ee\n</code></pre> <p>Try and see which ones work, and report back please.</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/start/","title":"Basic demo","text":""},{"location":"examples/generated/UserGuide/start/#quick-start-into-tyler","title":"Quick start into Tyler","text":""},{"location":"examples/generated/UserGuide/start/#a-basic-request","title":"A basic request","text":"<pre><code>using Tyler, GLMakie\n\nm = Tyler.Map(Rect2f(-0.0921, 51.5, 0.04, 0.025))\n</code></pre> <p>Info</p> <p>London</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/whale_ex/","title":"Whale shark trajectory","text":""},{"location":"examples/generated/UserGuide/whale_ex/#whale-shark-exampe-trajectory","title":"Whale shark exampe trajectory","text":""},{"location":"examples/generated/UserGuide/whale_ex/#using-the-full-stack-of-makie-should-just-work","title":"Using the full stack of Makie should just work.","text":"<pre><code>using Tyler, GLMakie\nusing CSV, DataFrames\nusing DataStructures: CircularBuffer\nusing TileProviders\nusing MapTiles\nusing Downloads: download\n\nfunction to_web_mercator(lo,lat)\n    return Point2f(MapTiles.project((lo,lat), MapTiles.wgs84, MapTiles.web_mercator))\nend\n\nurl = \"https://raw.githubusercontent.com/MakieOrg/Tyler.jl/master/docs/src/assets/data/whale_shark_128786.csv\"\nd = download(url)\nwhale = CSV.read(d, DataFrame)\nlon = whale[!, :lon]\nlat = whale[!, :lat]\nsteps = size(lon,1)\npoints = to_web_mercator.(lon,lat)\n\nlomn, lomx = extrema(lon)\nlamn, lamx = extrema(lat)\n\u03b4lon = abs(lomn - lomx)\n\u03b4lat = abs(lamn - lamx)\n\nprovider = TileProviders.NASAGIBS(:ViirsEarthAtNight2012)\n\nset_theme!(theme_black())\nm = Tyler.Map(Rect2f(Rect2f(lomn - \u03b4lon/2, lamn-\u03b4lat/2, 2\u03b4lon, 2\u03b4lat));\n    provider, figure=Figure(; size=(1000, 600)))\nwait(m)\n\nnt = 30\ntrail = CircularBuffer{Point2f}(nt)\nfill!(trail, points[1]) # add correct values to the circular buffer\ntrail = Observable(trail) # make it an observable\nwhale = Observable(points[1])\n\nc = to_color(:dodgerblue)\ntrailcolor = [RGBAf(c.r, c.g, c.b, (i/nt)^2.5) for i in 1:nt] # fading tail\n\nobjline = lines!(m.axis, trail; color = trailcolor, linewidth=3)\nobjscatter = scatter!(m.axis, whale; markersize = 15, color = :orangered,\n    strokecolor=:grey90, strokewidth=1)\nhidedecorations!(m.axis)\n#limits!(ax, minimum(lon), maximum(lon), minimum(lat), maximum(lat))\n# the animation is done by updating the Observable values\n# change assets-&gt;(your folder) to make it work in your local env\nrecord(m.figure, joinpath(\"assets\", \"whale_shark_128786.mp4\")) do io\n    for i in 2:steps\n        push!(trail[], points[i])\n        whale[] = points[i]\n        trail[] = trail[]\n        recordframe!(io)  # record a new frame\n    end\nend\nset_theme!()\n</code></pre> <p>Info</p> <p>Whale shark movements in Gulf of Mexico.</p> <p>Contact person: Eric Hoffmayer</p> <p></p> <p>This page was generated using Literate.jl.</p>"}]}