{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tylerjl","title":"Tyler.jl","text":"<p>A package for downloading map tiles on demand from different data source providers.</p> <p>Info</p> <ul> <li>This package is currently in the initial phase of development.</li> </ul> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>In the Julia REPL type:</p> <pre><code>using Pkg\nPkg.add([\"https://github.com/JuliaGeo/TileProviders.jl\", \"https://github.com/SimonDanisch/MapTiles.jl.git\", \"https://github.com/MakieOrg/Tyler.jl.git\"])\n</code></pre> <p>or</p> <pre><code>] add https://github.com/JuliaGeo/TileProviders.jl https://github.com/SimonDanisch/MapTiles.jl.git https://github.com/MakieOrg/Tyler.jl.git\n</code></pre> <p>The <code>]</code> character starts the Julia package manager. Hit backspace key to return to Julia prompt.</p>"},{"location":"examples/generated/UserGuide/start/","title":"Basic demo","text":""},{"location":"examples/generated/UserGuide/start/#quick-start-into-tyler","title":"Quick start into Tyler","text":""},{"location":"examples/generated/UserGuide/start/#a-basic-request","title":"A basic request","text":"<pre><code>using Tyler, GLMakie\n\nm = Tyler.Map(Rect2f(-0.0921, 51.5, 0.04, 0.025))\n</code></pre> <p>Info</p> <p>London</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/whale_ex/","title":"Whale shark trajectory","text":""},{"location":"examples/generated/UserGuide/whale_ex/#whale-shark-exampe-trajectory","title":"Whale shark exampe trajectory","text":""},{"location":"examples/generated/UserGuide/whale_ex/#using-the-full-stack-of-makie-should-just-work","title":"Using the full stack of Makie should just work.","text":"<pre><code>using Tyler, GLMakie\nusing CSV, DataFrames\nusing DataStructures: CircularBuffer\nusing TileProviders\nusing MapTiles\n\nfunction to_web_mercator(lo,lat)\nreturn Point2f(MapTiles.project((lo,lat), MapTiles.wgs84, MapTiles.web_mercator))\nend\n\nprovider = TileProviders.NASAGIBS(:ViirsEarthAtNight2012)\nm = Tyler.Map(Rect2f(-0.0921, 51.5, 0.04, 0.025), 5;\nprovider, min_tiles=8, max_tiles=16)\n</code></pre> <p>Rect2f(lomn - \u03b4lon/2, lamn-\u03b4lat/2, 2\u03b4lon, 2\u03b4lat)</p> <p>whale = CSV.read(\"./examples/data/whaleshark128786.csv\", DataFrame) lon = whale[!, :lon] lat = whale[!, :lat] steps = size(lon,1)</p> <p>points = towebmercator.(lon,lat)</p> <p>lomn, lomx = extrema(lon) lamn, lamx = extrema(lat) \u03b4lon = abs(lomn - lomx) \u03b4lat = abs(lamn - lamx)</p> <p>nt = 30 trail = CircularBuffer{Point2f}(nt) fill!(trail, points[1]) # add correct values to the circular buffer trail = Observable(trail) # make it an observable whale = Observable(points[1])</p> <p>c = to_color(:dodgerblue) trailcolor = [RGBAf(c.r, c.g, c.b, (i/nt)^2.5) for i in 1:nt] # fading tail wait(m)</p> <p>objline = lines!(m.axis, trail; color = trailcolor, linewidth=3) objscatter = scatter!(m.axis, whale; markersize = 15, color = :orangered,     strokecolor=:grey90, strokewidth=1) hidedecorations!(m.axis) translate!(objline, 0, 0, 2) translate!(objscatter, 0, 0, 2) #limits!(ax, minimum(lon), maximum(lon), minimum(lat), maximum(lat))</p> <p></p> <p></p>"},{"location":"examples/generated/UserGuide/whale_ex/#the-animation-is-done-by-updating-the-observable-values","title":"the animation is done by updating the Observable values","text":""},{"location":"examples/generated/UserGuide/whale_ex/#change-assets-your-folder-to-make-it-work-in-your-local-env","title":"change assets-&gt;(your folder) to make it work in your local env","text":"<p>record(m.figure, joinpath(\"assets\", \"whaleshark128786.mp4\")) do io     for i in 2:steps         push!(trail[], points[i])         whale[] = points[i]         trail[] = trail[]         recordframe!(io)  # record a new frame     end end</p> <p>Info</p> <p>Whale shark movements in Gulf of Mexico.   Contact person: Eric Hoffmayer</p> <pre><code># ![type:video](./assets/whale_shark_128786.mp4)\n</code></pre> <p>This page was generated using Literate.jl.</p>"}]}